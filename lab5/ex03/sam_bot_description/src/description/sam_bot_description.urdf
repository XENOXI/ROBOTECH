<?xml version="1.0"?>
<robot name="sam_bot" xmlns:xacro="http://ros.org/wiki/xacro">

  <!-- Define intertial property macros  -->
  <xacro:macro name="box_inertia" params="m w h d">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}"/>
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="cylinder_inertia" params="m r h">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/>
    </inertial>
  </xacro:macro>


  <!-- Define robot constants -->
  <xacro:property name="base_width" value="0.2"/>
  <xacro:property name="base_length" value="0.2"/>
  <xacro:property name="base_height" value="0.01"/>

  <xacro:property name="wheel_radius" value="0.05"/>
  <xacro:property name="wheel_width" value="0.04"/>
  <xacro:property name="wheel_ygap" value="0.02"/>
  <xacro:property name="wheel_zoff" value="0.02"/>
  <xacro:property name="wheel_xoff" value="0.1"/>


  

  <!-- Robot Base -->
  <link name="base_link">
    <visual>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
      <material name="Cyan">
        <color rgba="0 1.0 1.0 1.0"/>
      </material>
    </visual>

    <visual>
        <origin xyz="0.0 0.0 ${base_height+0.1}" rpy="0 0 0"/>
        <geometry>
        <cylinder length="0.2" radius="0.07"/>
        </geometry>
        <material name="orange">
          <color rgba="1 0.3 0.1 1"/>
        </material>
    </visual>

    <visual>
        <origin xyz="0.11 0.0 ${base_height+0.1}" rpy="0 0 0"/>
        <geometry>
        <cylinder length="0.1" radius="0.01"/>
        </geometry>
        <material name="orange">
          <color rgba="1 0.3 0.1 1"/>
        </material>
    </visual>

    <visual>
        <origin xyz="0.08 0.0 ${base_height+0.05}" rpy="0 1 0"/>
        <geometry>
        <cylinder length="0.07" radius="0.01"/>
        </geometry>
        <material name="orange">
          <color rgba="1 0.3 0.1 1"/>
        </material>
    </visual>

    <visual>
        <origin xyz="0.08 0.0 ${base_height+0.15}" rpy="0 -1.5 0"/>
        <geometry>
        <cylinder length="0.07" radius="0.01"/>
        </geometry>
        <material name="orange">
          <color rgba="1 0.3 0.1 1"/>
        </material>
    </visual>
 

    <collision>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
    </collision>

    <collision>
      <origin xyz="0.025 0.0 ${base_height+0.11}" rpy="0 0 0"/>
      <geometry>
        <box size="0.2 0.14 0.2"/>
      </geometry>
    </collision>

    <xacro:box_inertia m="1.0" w="${base_width}" d="${base_length}" h="${base_height}"/>
  </link>

  <link name="base_footprint"/>

  <joint name="base_joint" type="fixed">
    <parent link="base_link"/>
    <child link="base_footprint"/>
    <origin xyz="0.0 0.0 ${-(wheel_radius+wheel_zoff)}" rpy="0 0 0"/>
  </joint>


    <!-- Wheels -->
  <xacro:macro name="wheel" params="prefix x_reflect y_reflect">
    <link name="${prefix}_link">
      <visual>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
            <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
        <material name="Gray">
          <color rgba="0.5 0.5 0.5 1.0"/>
        </material>
      </visual>

      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
      </collision>

      <xacro:cylinder_inertia m="0.2" r="${wheel_radius}" h="${wheel_width}"/>
    </link>

    <joint name="${prefix}_joint" type="continuous">
      <parent link="base_link"/>
      <child link="${prefix}_link"/>
      <origin xyz="${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>
    </joint>


  </xacro:macro>

  <xacro:wheel prefix="drivewhl_lf" x_reflect="-1" y_reflect="1" />
  <xacro:wheel prefix="drivewhl_rf" x_reflect="-1" y_reflect="-1"/>
  <xacro:wheel prefix="drivewhl_lb" x_reflect="1" y_reflect="1" />   
  <xacro:wheel prefix="drivewhl_rb" x_reflect="1" y_reflect="-1" />

    




  <gazebo>
    <plugin
      filename="gz-sim-diff-drive-system"
      name="gz::sim::systems::DiffDrive">
      <left_joint>drivewhl_lf_joint</left_joint>
      <right_joint>drivewhl_rf_joint</right_joint>
      <wheel_separation>0.25</wheel_separation>
      <wheel_radius>${wheel_radius}</wheel_radius>
      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_link</robot_base_frame>
      <publish_odom>true</publish_odom>
      <publish_odom_tf>true</publish_odom_tf>
      <odom_publish_frequency>1</odom_publish_frequency>
      <max_linear_acceleration>1</max_linear_acceleration>
      <min_linear_acceleration>-1</min_linear_acceleration>
      <max_angular_acceleration>1</max_angular_acceleration>
      <min_angular_acceleration>-1</min_angular_acceleration>
      <max_linear_velocity>0.5</max_linear_velocity>
      <min_linear_velocity>-0.5</min_linear_velocity>
      <max_angular_velocity>1</max_angular_velocity>
      <min_angular_velocity>-1</min_angular_velocity>
    </plugin>

    <plugin
        filename="gz-sim-joint-state-publisher-system"
        name="gz::sim::systems::JointStatePublisher">
      </plugin>

      <plugin
        filename="gz-sim-pose-publisher-system"
        name="gz::sim::systems::PosePublisher">
        <publish_link_pose>true</publish_link_pose>
        <use_pose_vector_msg>true</use_pose_vector_msg>
        <static_publisher>true</static_publisher>
        <static_update_frequency>1</static_update_frequency>
      </plugin>

      <plugin
        filename="gz-sim-odometry-publisher-system"
        name="gz::sim::systems::OdometryPublisher">
        <odom_frame>bot/odom</odom_frame>
        <robot_base_frame>bot</robot_base_frame>
      </plugin>
  </gazebo>
</robot>

